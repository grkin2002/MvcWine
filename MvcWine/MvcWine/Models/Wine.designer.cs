#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3603
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace MvcWine.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="WineDB")]
	public partial class WineDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCart(Cart instance);
    partial void UpdateCart(Cart instance);
    partial void DeleteCart(Cart instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertGrape(Grape instance);
    partial void UpdateGrape(Grape instance);
    partial void DeleteGrape(Grape instance);
    partial void InsertMCity(MCity instance);
    partial void UpdateMCity(MCity instance);
    partial void DeleteMCity(MCity instance);
    partial void InsertMCountry(MCountry instance);
    partial void UpdateMCountry(MCountry instance);
    partial void DeleteMCountry(MCountry instance);
    partial void InsertMProvince(MProvince instance);
    partial void UpdateMProvince(MProvince instance);
    partial void DeleteMProvince(MProvince instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertOrderDetail(OrderDetail instance);
    partial void UpdateOrderDetail(OrderDetail instance);
    partial void DeleteOrderDetail(OrderDetail instance);
    partial void InsertProducer(Producer instance);
    partial void UpdateProducer(Producer instance);
    partial void DeleteProducer(Producer instance);
    partial void InsertRegion(Region instance);
    partial void UpdateRegion(Region instance);
    partial void DeleteRegion(Region instance);
    partial void InsertSubRegion(SubRegion instance);
    partial void UpdateSubRegion(SubRegion instance);
    partial void DeleteSubRegion(SubRegion instance);
    partial void InsertSupplier(Supplier instance);
    partial void UpdateSupplier(Supplier instance);
    partial void DeleteSupplier(Supplier instance);
    partial void InsertWine(Wine instance);
    partial void UpdateWine(Wine instance);
    partial void DeleteWine(Wine instance);
    partial void InsertPromote(Promote instance);
    partial void UpdatePromote(Promote instance);
    partial void DeletePromote(Promote instance);
    partial void InsertTaste(Taste instance);
    partial void UpdateTaste(Taste instance);
    partial void DeleteTaste(Taste instance);
    partial void InsertProductSupp(ProductSupp instance);
    partial void UpdateProductSupp(ProductSupp instance);
    partial void DeleteProductSupp(ProductSupp instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    #endregion
		
		public WineDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["WineDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public WineDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WineDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WineDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WineDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Cart> Cart
		{
			get
			{
				return this.GetTable<Cart>();
			}
		}
		
		public System.Data.Linq.Table<Country> Country
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<Grape> Grape
		{
			get
			{
				return this.GetTable<Grape>();
			}
		}
		
		public System.Data.Linq.Table<MCity> MCity
		{
			get
			{
				return this.GetTable<MCity>();
			}
		}
		
		public System.Data.Linq.Table<MCountry> MCountry
		{
			get
			{
				return this.GetTable<MCountry>();
			}
		}
		
		public System.Data.Linq.Table<MProvince> MProvince
		{
			get
			{
				return this.GetTable<MProvince>();
			}
		}
		
		public System.Data.Linq.Table<Order> Order
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<OrderDetail> OrderDetail
		{
			get
			{
				return this.GetTable<OrderDetail>();
			}
		}
		
		public System.Data.Linq.Table<Producer> Producer
		{
			get
			{
				return this.GetTable<Producer>();
			}
		}
		
		public System.Data.Linq.Table<Region> Region
		{
			get
			{
				return this.GetTable<Region>();
			}
		}
		
		public System.Data.Linq.Table<SubRegion> SubRegion
		{
			get
			{
				return this.GetTable<SubRegion>();
			}
		}
		
		public System.Data.Linq.Table<Supplier> Supplier
		{
			get
			{
				return this.GetTable<Supplier>();
			}
		}
		
		public System.Data.Linq.Table<Wine> Wine
		{
			get
			{
				return this.GetTable<Wine>();
			}
		}
		
		public System.Data.Linq.Table<Promote> Promote
		{
			get
			{
				return this.GetTable<Promote>();
			}
		}
		
		public System.Data.Linq.Table<Taste> Taste
		{
			get
			{
				return this.GetTable<Taste>();
			}
		}
		
		public System.Data.Linq.Table<ProductSupp> ProductSupp
		{
			get
			{
				return this.GetTable<ProductSupp>();
			}
		}
		
		public System.Data.Linq.Table<Product> Product
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
	}
	
	[Table(Name="dbo.Cart")]
	public partial class Cart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _CartId;
		
		private System.Nullable<int> _Count;
		
		private int _ProductId;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCartIdChanging(string value);
    partial void OnCartIdChanged();
    partial void OnCountChanging(System.Nullable<int> value);
    partial void OnCountChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public Cart()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_CartId", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CartId
		{
			get
			{
				return this._CartId;
			}
			set
			{
				if ((this._CartId != value))
				{
					this.OnCartIdChanging(value);
					this.SendPropertyChanging();
					this._CartId = value;
					this.SendPropertyChanged("CartId");
					this.OnCartIdChanged();
				}
			}
		}
		
		[Column(Storage="_Count", DbType="Int")]
		public System.Nullable<int> Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this.OnCountChanging(value);
					this.SendPropertyChanging();
					this._Count = value;
					this.SendPropertyChanged("Count");
					this.OnCountChanged();
				}
			}
		}
		
		[Column(Storage="_ProductId", DbType="Int NOT NULL")]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_DateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[Association(Name="Product_Cart", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Cart.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Cart.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Country")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CountryCode;
		
		private string _CountryName;
		
		private string _PhotoUrl;
		
		private string _IntroText;
		
		private EntitySet<Region> _Region;
		
		private EntitySet<SubRegion> _SubRegion;
		
		private EntitySet<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryCodeChanging(string value);
    partial void OnCountryCodeChanged();
    partial void OnCountryNameChanging(string value);
    partial void OnCountryNameChanged();
    partial void OnPhotoUrlChanging(string value);
    partial void OnPhotoUrlChanged();
    partial void OnIntroTextChanging(string value);
    partial void OnIntroTextChanged();
    #endregion
		
		public Country()
		{
			this._Region = new EntitySet<Region>(new Action<Region>(this.attach_Region), new Action<Region>(this.detach_Region));
			this._SubRegion = new EntitySet<SubRegion>(new Action<SubRegion>(this.attach_SubRegion), new Action<SubRegion>(this.detach_SubRegion));
			this._Product = new EntitySet<Product>(new Action<Product>(this.attach_Product), new Action<Product>(this.detach_Product));
			OnCreated();
		}
		
		[Column(Storage="_CountryCode", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CountryCode
		{
			get
			{
				return this._CountryCode;
			}
			set
			{
				if ((this._CountryCode != value))
				{
					this.OnCountryCodeChanging(value);
					this.SendPropertyChanging();
					this._CountryCode = value;
					this.SendPropertyChanged("CountryCode");
					this.OnCountryCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CountryName", DbType="NVarChar(50)")]
		public string CountryName
		{
			get
			{
				return this._CountryName;
			}
			set
			{
				if ((this._CountryName != value))
				{
					this.OnCountryNameChanging(value);
					this.SendPropertyChanging();
					this._CountryName = value;
					this.SendPropertyChanged("CountryName");
					this.OnCountryNameChanged();
				}
			}
		}
		
		[Column(Storage="_PhotoUrl", DbType="NVarChar(50)")]
		public string PhotoUrl
		{
			get
			{
				return this._PhotoUrl;
			}
			set
			{
				if ((this._PhotoUrl != value))
				{
					this.OnPhotoUrlChanging(value);
					this.SendPropertyChanging();
					this._PhotoUrl = value;
					this.SendPropertyChanged("PhotoUrl");
					this.OnPhotoUrlChanged();
				}
			}
		}
		
		[Column(Storage="_IntroText", DbType="NVarChar(MAX)")]
		public string IntroText
		{
			get
			{
				return this._IntroText;
			}
			set
			{
				if ((this._IntroText != value))
				{
					this.OnIntroTextChanging(value);
					this.SendPropertyChanging();
					this._IntroText = value;
					this.SendPropertyChanged("IntroText");
					this.OnIntroTextChanged();
				}
			}
		}
		
		[Association(Name="Country_Region", Storage="_Region", ThisKey="CountryCode", OtherKey="CountryCode")]
		public EntitySet<Region> Region
		{
			get
			{
				return this._Region;
			}
			set
			{
				this._Region.Assign(value);
			}
		}
		
		[Association(Name="Country_SubRegion", Storage="_SubRegion", ThisKey="CountryCode", OtherKey="CountryCode")]
		public EntitySet<SubRegion> SubRegion
		{
			get
			{
				return this._SubRegion;
			}
			set
			{
				this._SubRegion.Assign(value);
			}
		}
		
		[Association(Name="Country_Product", Storage="_Product", ThisKey="CountryCode", OtherKey="CountryCode")]
		public EntitySet<Product> Product
		{
			get
			{
				return this._Product;
			}
			set
			{
				this._Product.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Region(Region entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Region(Region entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_SubRegion(SubRegion entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_SubRegion(SubRegion entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_Product(Product entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Product(Product entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[Table(Name="dbo.Grape")]
	public partial class Grape : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GrapeId;
		
		private string _GrapeType;
		
		private string _PhotoUrl;
		
		private string _IntroText;
		
		private EntitySet<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGrapeIdChanging(int value);
    partial void OnGrapeIdChanged();
    partial void OnGrapeTypeChanging(string value);
    partial void OnGrapeTypeChanged();
    partial void OnPhotoUrlChanging(string value);
    partial void OnPhotoUrlChanged();
    partial void OnIntroTextChanging(string value);
    partial void OnIntroTextChanged();
    #endregion
		
		public Grape()
		{
			this._Product = new EntitySet<Product>(new Action<Product>(this.attach_Product), new Action<Product>(this.detach_Product));
			OnCreated();
		}
		
		[Column(Storage="_GrapeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GrapeId
		{
			get
			{
				return this._GrapeId;
			}
			set
			{
				if ((this._GrapeId != value))
				{
					this.OnGrapeIdChanging(value);
					this.SendPropertyChanging();
					this._GrapeId = value;
					this.SendPropertyChanged("GrapeId");
					this.OnGrapeIdChanged();
				}
			}
		}
		
		[Column(Storage="_GrapeType", DbType="NVarChar(20)")]
		public string GrapeType
		{
			get
			{
				return this._GrapeType;
			}
			set
			{
				if ((this._GrapeType != value))
				{
					this.OnGrapeTypeChanging(value);
					this.SendPropertyChanging();
					this._GrapeType = value;
					this.SendPropertyChanged("GrapeType");
					this.OnGrapeTypeChanged();
				}
			}
		}
		
		[Column(Storage="_PhotoUrl", DbType="NVarChar(50)")]
		public string PhotoUrl
		{
			get
			{
				return this._PhotoUrl;
			}
			set
			{
				if ((this._PhotoUrl != value))
				{
					this.OnPhotoUrlChanging(value);
					this.SendPropertyChanging();
					this._PhotoUrl = value;
					this.SendPropertyChanged("PhotoUrl");
					this.OnPhotoUrlChanged();
				}
			}
		}
		
		[Column(Storage="_IntroText", DbType="NVarChar(MAX)")]
		public string IntroText
		{
			get
			{
				return this._IntroText;
			}
			set
			{
				if ((this._IntroText != value))
				{
					this.OnIntroTextChanging(value);
					this.SendPropertyChanging();
					this._IntroText = value;
					this.SendPropertyChanged("IntroText");
					this.OnIntroTextChanged();
				}
			}
		}
		
		[Association(Name="Grape_Product", Storage="_Product", ThisKey="GrapeId", OtherKey="GrapeId")]
		public EntitySet<Product> Product
		{
			get
			{
				return this._Product;
			}
			set
			{
				this._Product.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Product(Product entity)
		{
			this.SendPropertyChanging();
			entity.Grape = this;
		}
		
		private void detach_Product(Product entity)
		{
			this.SendPropertyChanging();
			entity.Grape = null;
		}
	}
	
	[Table(Name="dbo.MCity")]
	public partial class MCity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MCityCode;
		
		private string _MCityName;
		
		private string _MProvinceCode;
		
		private EntitySet<Order> _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMCityCodeChanging(string value);
    partial void OnMCityCodeChanged();
    partial void OnMCityNameChanging(string value);
    partial void OnMCityNameChanged();
    partial void OnMProvinceCodeChanging(string value);
    partial void OnMProvinceCodeChanged();
    #endregion
		
		public MCity()
		{
			this._Order = new EntitySet<Order>(new Action<Order>(this.attach_Order), new Action<Order>(this.detach_Order));
			OnCreated();
		}
		
		[Column(Storage="_MCityCode", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MCityCode
		{
			get
			{
				return this._MCityCode;
			}
			set
			{
				if ((this._MCityCode != value))
				{
					this.OnMCityCodeChanging(value);
					this.SendPropertyChanging();
					this._MCityCode = value;
					this.SendPropertyChanged("MCityCode");
					this.OnMCityCodeChanged();
				}
			}
		}
		
		[Column(Storage="_MCityName", DbType="VarChar(20)")]
		public string MCityName
		{
			get
			{
				return this._MCityName;
			}
			set
			{
				if ((this._MCityName != value))
				{
					this.OnMCityNameChanging(value);
					this.SendPropertyChanging();
					this._MCityName = value;
					this.SendPropertyChanged("MCityName");
					this.OnMCityNameChanged();
				}
			}
		}
		
		[Column(Storage="_MProvinceCode", DbType="NChar(10)")]
		public string MProvinceCode
		{
			get
			{
				return this._MProvinceCode;
			}
			set
			{
				if ((this._MProvinceCode != value))
				{
					this.OnMProvinceCodeChanging(value);
					this.SendPropertyChanging();
					this._MProvinceCode = value;
					this.SendPropertyChanged("MProvinceCode");
					this.OnMProvinceCodeChanged();
				}
			}
		}
		
		[Association(Name="MCity_Order", Storage="_Order", ThisKey="MCityCode", OtherKey="MCityCode")]
		public EntitySet<Order> Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				this._Order.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Order(Order entity)
		{
			this.SendPropertyChanging();
			entity.MCity = this;
		}
		
		private void detach_Order(Order entity)
		{
			this.SendPropertyChanging();
			entity.MCity = null;
		}
	}
	
	[Table(Name="dbo.MCountry")]
	public partial class MCountry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MCountryCode;
		
		private string _MCountryName;
		
		private EntitySet<Order> _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMCountryCodeChanging(string value);
    partial void OnMCountryCodeChanged();
    partial void OnMCountryNameChanging(string value);
    partial void OnMCountryNameChanged();
    #endregion
		
		public MCountry()
		{
			this._Order = new EntitySet<Order>(new Action<Order>(this.attach_Order), new Action<Order>(this.detach_Order));
			OnCreated();
		}
		
		[Column(Storage="_MCountryCode", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MCountryCode
		{
			get
			{
				return this._MCountryCode;
			}
			set
			{
				if ((this._MCountryCode != value))
				{
					this.OnMCountryCodeChanging(value);
					this.SendPropertyChanging();
					this._MCountryCode = value;
					this.SendPropertyChanged("MCountryCode");
					this.OnMCountryCodeChanged();
				}
			}
		}
		
		[Column(Storage="_MCountryName", DbType="NVarChar(50)")]
		public string MCountryName
		{
			get
			{
				return this._MCountryName;
			}
			set
			{
				if ((this._MCountryName != value))
				{
					this.OnMCountryNameChanging(value);
					this.SendPropertyChanging();
					this._MCountryName = value;
					this.SendPropertyChanged("MCountryName");
					this.OnMCountryNameChanged();
				}
			}
		}
		
		[Association(Name="MCountry_Order", Storage="_Order", ThisKey="MCountryCode", OtherKey="MCountryCode")]
		public EntitySet<Order> Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				this._Order.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Order(Order entity)
		{
			this.SendPropertyChanging();
			entity.MCountry = this;
		}
		
		private void detach_Order(Order entity)
		{
			this.SendPropertyChanging();
			entity.MCountry = null;
		}
	}
	
	[Table(Name="dbo.MProvince")]
	public partial class MProvince : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MProvinceCode;
		
		private string _MProvinceName;
		
		private string _MCountryCode;
		
		private EntitySet<Order> _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMProvinceCodeChanging(string value);
    partial void OnMProvinceCodeChanged();
    partial void OnMProvinceNameChanging(string value);
    partial void OnMProvinceNameChanged();
    partial void OnMCountryCodeChanging(string value);
    partial void OnMCountryCodeChanged();
    #endregion
		
		public MProvince()
		{
			this._Order = new EntitySet<Order>(new Action<Order>(this.attach_Order), new Action<Order>(this.detach_Order));
			OnCreated();
		}
		
		[Column(Storage="_MProvinceCode", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MProvinceCode
		{
			get
			{
				return this._MProvinceCode;
			}
			set
			{
				if ((this._MProvinceCode != value))
				{
					this.OnMProvinceCodeChanging(value);
					this.SendPropertyChanging();
					this._MProvinceCode = value;
					this.SendPropertyChanged("MProvinceCode");
					this.OnMProvinceCodeChanged();
				}
			}
		}
		
		[Column(Storage="_MProvinceName", DbType="NVarChar(20)")]
		public string MProvinceName
		{
			get
			{
				return this._MProvinceName;
			}
			set
			{
				if ((this._MProvinceName != value))
				{
					this.OnMProvinceNameChanging(value);
					this.SendPropertyChanging();
					this._MProvinceName = value;
					this.SendPropertyChanged("MProvinceName");
					this.OnMProvinceNameChanged();
				}
			}
		}
		
		[Column(Storage="_MCountryCode", DbType="NChar(10)")]
		public string MCountryCode
		{
			get
			{
				return this._MCountryCode;
			}
			set
			{
				if ((this._MCountryCode != value))
				{
					this.OnMCountryCodeChanging(value);
					this.SendPropertyChanging();
					this._MCountryCode = value;
					this.SendPropertyChanged("MCountryCode");
					this.OnMCountryCodeChanged();
				}
			}
		}
		
		[Association(Name="MProvince_Order", Storage="_Order", ThisKey="MProvinceCode", OtherKey="MProvinceCode")]
		public EntitySet<Order> Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				this._Order.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Order(Order entity)
		{
			this.SendPropertyChanging();
			entity.MProvince = this;
		}
		
		private void detach_Order(Order entity)
		{
			this.SendPropertyChanging();
			entity.MProvince = null;
		}
	}
	
	[Table(Name="dbo.[Order]")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderId;
		
		private System.Nullable<System.DateTime> _OrderDate;
		
		private string _UserName;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Address;
		
		private string _MCityCode;
		
		private string _MProvinceCode;
		
		private string _MPostalCode;
		
		private string _MCountryCode;
		
		private string _Phone;
		
		private string _Email;
		
		private System.Nullable<decimal> _Total;
		
		private EntitySet<OrderDetail> _OrderDetail;
		
		private EntityRef<MCity> _MCity;
		
		private EntityRef<MCountry> _MCountry;
		
		private EntityRef<MProvince> _MProvince;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIdChanging(int value);
    partial void OnOrderIdChanged();
    partial void OnOrderDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOrderDateChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnMCityCodeChanging(string value);
    partial void OnMCityCodeChanged();
    partial void OnMProvinceCodeChanging(string value);
    partial void OnMProvinceCodeChanged();
    partial void OnMPostalCodeChanging(string value);
    partial void OnMPostalCodeChanged();
    partial void OnMCountryCodeChanging(string value);
    partial void OnMCountryCodeChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnTotalChanging(System.Nullable<decimal> value);
    partial void OnTotalChanged();
    #endregion
		
		public Order()
		{
			this._OrderDetail = new EntitySet<OrderDetail>(new Action<OrderDetail>(this.attach_OrderDetail), new Action<OrderDetail>(this.detach_OrderDetail));
			this._MCity = default(EntityRef<MCity>);
			this._MCountry = default(EntityRef<MCountry>);
			this._MProvince = default(EntityRef<MProvince>);
			OnCreated();
		}
		
		[Column(Storage="_OrderId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[Column(Storage="_OrderDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> OrderDate
		{
			get
			{
				return this._OrderDate;
			}
			set
			{
				if ((this._OrderDate != value))
				{
					this.OnOrderDateChanging(value);
					this.SendPropertyChanging();
					this._OrderDate = value;
					this.SendPropertyChanged("OrderDate");
					this.OnOrderDateChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(20)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(20)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(20)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NVarChar(100)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_MCityCode", DbType="NChar(10)")]
		public string MCityCode
		{
			get
			{
				return this._MCityCode;
			}
			set
			{
				if ((this._MCityCode != value))
				{
					if (this._MCity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMCityCodeChanging(value);
					this.SendPropertyChanging();
					this._MCityCode = value;
					this.SendPropertyChanged("MCityCode");
					this.OnMCityCodeChanged();
				}
			}
		}
		
		[Column(Storage="_MProvinceCode", DbType="NChar(10)")]
		public string MProvinceCode
		{
			get
			{
				return this._MProvinceCode;
			}
			set
			{
				if ((this._MProvinceCode != value))
				{
					if (this._MProvince.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMProvinceCodeChanging(value);
					this.SendPropertyChanging();
					this._MProvinceCode = value;
					this.SendPropertyChanged("MProvinceCode");
					this.OnMProvinceCodeChanged();
				}
			}
		}
		
		[Column(Storage="_MPostalCode", DbType="NChar(10)")]
		public string MPostalCode
		{
			get
			{
				return this._MPostalCode;
			}
			set
			{
				if ((this._MPostalCode != value))
				{
					this.OnMPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._MPostalCode = value;
					this.SendPropertyChanged("MPostalCode");
					this.OnMPostalCodeChanged();
				}
			}
		}
		
		[Column(Storage="_MCountryCode", DbType="NChar(10)")]
		public string MCountryCode
		{
			get
			{
				return this._MCountryCode;
			}
			set
			{
				if ((this._MCountryCode != value))
				{
					if (this._MCountry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMCountryCodeChanging(value);
					this.SendPropertyChanging();
					this._MCountryCode = value;
					this.SendPropertyChanged("MCountryCode");
					this.OnMCountryCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="NVarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(20)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Total", DbType="Money")]
		public System.Nullable<decimal> Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[Association(Name="Order_OrderDetail", Storage="_OrderDetail", ThisKey="OrderId", OtherKey="OrderId")]
		public EntitySet<OrderDetail> OrderDetail
		{
			get
			{
				return this._OrderDetail;
			}
			set
			{
				this._OrderDetail.Assign(value);
			}
		}
		
		[Association(Name="MCity_Order", Storage="_MCity", ThisKey="MCityCode", OtherKey="MCityCode", IsForeignKey=true)]
		public MCity MCity
		{
			get
			{
				return this._MCity.Entity;
			}
			set
			{
				MCity previousValue = this._MCity.Entity;
				if (((previousValue != value) 
							|| (this._MCity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MCity.Entity = null;
						previousValue.Order.Remove(this);
					}
					this._MCity.Entity = value;
					if ((value != null))
					{
						value.Order.Add(this);
						this._MCityCode = value.MCityCode;
					}
					else
					{
						this._MCityCode = default(string);
					}
					this.SendPropertyChanged("MCity");
				}
			}
		}
		
		[Association(Name="MCountry_Order", Storage="_MCountry", ThisKey="MCountryCode", OtherKey="MCountryCode", IsForeignKey=true)]
		public MCountry MCountry
		{
			get
			{
				return this._MCountry.Entity;
			}
			set
			{
				MCountry previousValue = this._MCountry.Entity;
				if (((previousValue != value) 
							|| (this._MCountry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MCountry.Entity = null;
						previousValue.Order.Remove(this);
					}
					this._MCountry.Entity = value;
					if ((value != null))
					{
						value.Order.Add(this);
						this._MCountryCode = value.MCountryCode;
					}
					else
					{
						this._MCountryCode = default(string);
					}
					this.SendPropertyChanged("MCountry");
				}
			}
		}
		
		[Association(Name="MProvince_Order", Storage="_MProvince", ThisKey="MProvinceCode", OtherKey="MProvinceCode", IsForeignKey=true)]
		public MProvince MProvince
		{
			get
			{
				return this._MProvince.Entity;
			}
			set
			{
				MProvince previousValue = this._MProvince.Entity;
				if (((previousValue != value) 
							|| (this._MProvince.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MProvince.Entity = null;
						previousValue.Order.Remove(this);
					}
					this._MProvince.Entity = value;
					if ((value != null))
					{
						value.Order.Add(this);
						this._MProvinceCode = value.MProvinceCode;
					}
					else
					{
						this._MProvinceCode = default(string);
					}
					this.SendPropertyChanged("MProvince");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderDetail(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_OrderDetail(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
	}
	
	[Table(Name="dbo.OrderDetail")]
	public partial class OrderDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderDetailId;
		
		private System.Nullable<int> _OrderId;
		
		private System.Nullable<int> _productId;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<decimal> _UnitPrice;
		
		private EntityRef<Order> _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderDetailIdChanging(int value);
    partial void OnOrderDetailIdChanged();
    partial void OnOrderIdChanging(System.Nullable<int> value);
    partial void OnOrderIdChanged();
    partial void OnproductIdChanging(System.Nullable<int> value);
    partial void OnproductIdChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnUnitPriceChanging(System.Nullable<decimal> value);
    partial void OnUnitPriceChanged();
    #endregion
		
		public OrderDetail()
		{
			this._Order = default(EntityRef<Order>);
			OnCreated();
		}
		
		[Column(Storage="_OrderDetailId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderDetailId
		{
			get
			{
				return this._OrderDetailId;
			}
			set
			{
				if ((this._OrderDetailId != value))
				{
					this.OnOrderDetailIdChanging(value);
					this.SendPropertyChanging();
					this._OrderDetailId = value;
					this.SendPropertyChanged("OrderDetailId");
					this.OnOrderDetailIdChanged();
				}
			}
		}
		
		[Column(Storage="_OrderId", DbType="Int")]
		public System.Nullable<int> OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[Column(Storage="_productId", DbType="Int")]
		public System.Nullable<int> productId
		{
			get
			{
				return this._productId;
			}
			set
			{
				if ((this._productId != value))
				{
					this.OnproductIdChanging(value);
					this.SendPropertyChanging();
					this._productId = value;
					this.SendPropertyChanged("productId");
					this.OnproductIdChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_UnitPrice", DbType="Money")]
		public System.Nullable<decimal> UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[Association(Name="Order_OrderDetail", Storage="_Order", ThisKey="OrderId", OtherKey="OrderId", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderDetail.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderDetail.Add(this);
						this._OrderId = value.OrderId;
					}
					else
					{
						this._OrderId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Producer")]
	public partial class Producer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProducerId;
		
		private string _ProducerName;
		
		private string _PhotoUrl;
		
		private string _IntroText;
		
		private EntitySet<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProducerIdChanging(int value);
    partial void OnProducerIdChanged();
    partial void OnProducerNameChanging(string value);
    partial void OnProducerNameChanged();
    partial void OnPhotoUrlChanging(string value);
    partial void OnPhotoUrlChanged();
    partial void OnIntroTextChanging(string value);
    partial void OnIntroTextChanged();
    #endregion
		
		public Producer()
		{
			this._Product = new EntitySet<Product>(new Action<Product>(this.attach_Product), new Action<Product>(this.detach_Product));
			OnCreated();
		}
		
		[Column(Storage="_ProducerId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProducerId
		{
			get
			{
				return this._ProducerId;
			}
			set
			{
				if ((this._ProducerId != value))
				{
					this.OnProducerIdChanging(value);
					this.SendPropertyChanging();
					this._ProducerId = value;
					this.SendPropertyChanged("ProducerId");
					this.OnProducerIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProducerName", DbType="NVarChar(50)")]
		public string ProducerName
		{
			get
			{
				return this._ProducerName;
			}
			set
			{
				if ((this._ProducerName != value))
				{
					this.OnProducerNameChanging(value);
					this.SendPropertyChanging();
					this._ProducerName = value;
					this.SendPropertyChanged("ProducerName");
					this.OnProducerNameChanged();
				}
			}
		}
		
		[Column(Storage="_PhotoUrl", DbType="NVarChar(50)")]
		public string PhotoUrl
		{
			get
			{
				return this._PhotoUrl;
			}
			set
			{
				if ((this._PhotoUrl != value))
				{
					this.OnPhotoUrlChanging(value);
					this.SendPropertyChanging();
					this._PhotoUrl = value;
					this.SendPropertyChanged("PhotoUrl");
					this.OnPhotoUrlChanged();
				}
			}
		}
		
		[Column(Storage="_IntroText", DbType="NVarChar(MAX)")]
		public string IntroText
		{
			get
			{
				return this._IntroText;
			}
			set
			{
				if ((this._IntroText != value))
				{
					this.OnIntroTextChanging(value);
					this.SendPropertyChanging();
					this._IntroText = value;
					this.SendPropertyChanged("IntroText");
					this.OnIntroTextChanged();
				}
			}
		}
		
		[Association(Name="Producer_Product", Storage="_Product", ThisKey="ProducerId", OtherKey="ProducerId")]
		public EntitySet<Product> Product
		{
			get
			{
				return this._Product;
			}
			set
			{
				this._Product.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Product(Product entity)
		{
			this.SendPropertyChanging();
			entity.Producer = this;
		}
		
		private void detach_Product(Product entity)
		{
			this.SendPropertyChanging();
			entity.Producer = null;
		}
	}
	
	[Table(Name="dbo.Region")]
	public partial class Region : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _RegionCode;
		
		private string _RegionName;
		
		private string _CountryCode;
		
		private string _PhotoUrl;
		
		private string _IntroText;
		
		private EntitySet<SubRegion> _SubRegion;
		
		private EntitySet<Product> _Product;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRegionCodeChanging(string value);
    partial void OnRegionCodeChanged();
    partial void OnRegionNameChanging(string value);
    partial void OnRegionNameChanged();
    partial void OnCountryCodeChanging(string value);
    partial void OnCountryCodeChanged();
    partial void OnPhotoUrlChanging(string value);
    partial void OnPhotoUrlChanged();
    partial void OnIntroTextChanging(string value);
    partial void OnIntroTextChanged();
    #endregion
		
		public Region()
		{
			this._SubRegion = new EntitySet<SubRegion>(new Action<SubRegion>(this.attach_SubRegion), new Action<SubRegion>(this.detach_SubRegion));
			this._Product = new EntitySet<Product>(new Action<Product>(this.attach_Product), new Action<Product>(this.detach_Product));
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[Column(Storage="_RegionCode", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RegionCode
		{
			get
			{
				return this._RegionCode;
			}
			set
			{
				if ((this._RegionCode != value))
				{
					this.OnRegionCodeChanging(value);
					this.SendPropertyChanging();
					this._RegionCode = value;
					this.SendPropertyChanged("RegionCode");
					this.OnRegionCodeChanged();
				}
			}
		}
		
		[Column(Storage="_RegionName", DbType="NVarChar(50)")]
		public string RegionName
		{
			get
			{
				return this._RegionName;
			}
			set
			{
				if ((this._RegionName != value))
				{
					this.OnRegionNameChanging(value);
					this.SendPropertyChanging();
					this._RegionName = value;
					this.SendPropertyChanged("RegionName");
					this.OnRegionNameChanged();
				}
			}
		}
		
		[Column(Storage="_CountryCode", DbType="NChar(10)")]
		public string CountryCode
		{
			get
			{
				return this._CountryCode;
			}
			set
			{
				if ((this._CountryCode != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryCodeChanging(value);
					this.SendPropertyChanging();
					this._CountryCode = value;
					this.SendPropertyChanged("CountryCode");
					this.OnCountryCodeChanged();
				}
			}
		}
		
		[Column(Storage="_PhotoUrl", DbType="NVarChar(50)")]
		public string PhotoUrl
		{
			get
			{
				return this._PhotoUrl;
			}
			set
			{
				if ((this._PhotoUrl != value))
				{
					this.OnPhotoUrlChanging(value);
					this.SendPropertyChanging();
					this._PhotoUrl = value;
					this.SendPropertyChanged("PhotoUrl");
					this.OnPhotoUrlChanged();
				}
			}
		}
		
		[Column(Storage="_IntroText", DbType="NVarChar(MAX)")]
		public string IntroText
		{
			get
			{
				return this._IntroText;
			}
			set
			{
				if ((this._IntroText != value))
				{
					this.OnIntroTextChanging(value);
					this.SendPropertyChanging();
					this._IntroText = value;
					this.SendPropertyChanged("IntroText");
					this.OnIntroTextChanged();
				}
			}
		}
		
		[Association(Name="Region_SubRegion", Storage="_SubRegion", ThisKey="RegionCode", OtherKey="RegionCode")]
		public EntitySet<SubRegion> SubRegion
		{
			get
			{
				return this._SubRegion;
			}
			set
			{
				this._SubRegion.Assign(value);
			}
		}
		
		[Association(Name="Region_Product", Storage="_Product", ThisKey="RegionCode", OtherKey="RegionCode")]
		public EntitySet<Product> Product
		{
			get
			{
				return this._Product;
			}
			set
			{
				this._Product.Assign(value);
			}
		}
		
		[Association(Name="Country_Region", Storage="_Country", ThisKey="CountryCode", OtherKey="CountryCode", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Region.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Region.Add(this);
						this._CountryCode = value.CountryCode;
					}
					else
					{
						this._CountryCode = default(string);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SubRegion(SubRegion entity)
		{
			this.SendPropertyChanging();
			entity.Region = this;
		}
		
		private void detach_SubRegion(SubRegion entity)
		{
			this.SendPropertyChanging();
			entity.Region = null;
		}
		
		private void attach_Product(Product entity)
		{
			this.SendPropertyChanging();
			entity.Region = this;
		}
		
		private void detach_Product(Product entity)
		{
			this.SendPropertyChanging();
			entity.Region = null;
		}
	}
	
	[Table(Name="dbo.SubRegion")]
	public partial class SubRegion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SubRegionCode;
		
		private string _SubRegionName;
		
		private string _RegionCode;
		
		private string _CountryCode;
		
		private string _PhotoUrl;
		
		private string _IntroText;
		
		private EntitySet<Product> _Product;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<Region> _Region;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubRegionCodeChanging(string value);
    partial void OnSubRegionCodeChanged();
    partial void OnSubRegionNameChanging(string value);
    partial void OnSubRegionNameChanged();
    partial void OnRegionCodeChanging(string value);
    partial void OnRegionCodeChanged();
    partial void OnCountryCodeChanging(string value);
    partial void OnCountryCodeChanged();
    partial void OnPhotoUrlChanging(string value);
    partial void OnPhotoUrlChanged();
    partial void OnIntroTextChanging(string value);
    partial void OnIntroTextChanged();
    #endregion
		
		public SubRegion()
		{
			this._Product = new EntitySet<Product>(new Action<Product>(this.attach_Product), new Action<Product>(this.detach_Product));
			this._Country = default(EntityRef<Country>);
			this._Region = default(EntityRef<Region>);
			OnCreated();
		}
		
		[Column(Storage="_SubRegionCode", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SubRegionCode
		{
			get
			{
				return this._SubRegionCode;
			}
			set
			{
				if ((this._SubRegionCode != value))
				{
					this.OnSubRegionCodeChanging(value);
					this.SendPropertyChanging();
					this._SubRegionCode = value;
					this.SendPropertyChanged("SubRegionCode");
					this.OnSubRegionCodeChanged();
				}
			}
		}
		
		[Column(Storage="_SubRegionName", DbType="NVarChar(50)")]
		public string SubRegionName
		{
			get
			{
				return this._SubRegionName;
			}
			set
			{
				if ((this._SubRegionName != value))
				{
					this.OnSubRegionNameChanging(value);
					this.SendPropertyChanging();
					this._SubRegionName = value;
					this.SendPropertyChanged("SubRegionName");
					this.OnSubRegionNameChanged();
				}
			}
		}
		
		[Column(Storage="_RegionCode", DbType="NChar(10)")]
		public string RegionCode
		{
			get
			{
				return this._RegionCode;
			}
			set
			{
				if ((this._RegionCode != value))
				{
					if (this._Region.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegionCodeChanging(value);
					this.SendPropertyChanging();
					this._RegionCode = value;
					this.SendPropertyChanged("RegionCode");
					this.OnRegionCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CountryCode", DbType="NChar(10)")]
		public string CountryCode
		{
			get
			{
				return this._CountryCode;
			}
			set
			{
				if ((this._CountryCode != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryCodeChanging(value);
					this.SendPropertyChanging();
					this._CountryCode = value;
					this.SendPropertyChanged("CountryCode");
					this.OnCountryCodeChanged();
				}
			}
		}
		
		[Column(Storage="_PhotoUrl", DbType="NVarChar(50)")]
		public string PhotoUrl
		{
			get
			{
				return this._PhotoUrl;
			}
			set
			{
				if ((this._PhotoUrl != value))
				{
					this.OnPhotoUrlChanging(value);
					this.SendPropertyChanging();
					this._PhotoUrl = value;
					this.SendPropertyChanged("PhotoUrl");
					this.OnPhotoUrlChanged();
				}
			}
		}
		
		[Column(Storage="_IntroText", DbType="NVarChar(MAX)")]
		public string IntroText
		{
			get
			{
				return this._IntroText;
			}
			set
			{
				if ((this._IntroText != value))
				{
					this.OnIntroTextChanging(value);
					this.SendPropertyChanging();
					this._IntroText = value;
					this.SendPropertyChanged("IntroText");
					this.OnIntroTextChanged();
				}
			}
		}
		
		[Association(Name="SubRegion_Product", Storage="_Product", ThisKey="SubRegionCode", OtherKey="SubRegionCode")]
		public EntitySet<Product> Product
		{
			get
			{
				return this._Product;
			}
			set
			{
				this._Product.Assign(value);
			}
		}
		
		[Association(Name="Country_SubRegion", Storage="_Country", ThisKey="CountryCode", OtherKey="CountryCode", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.SubRegion.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.SubRegion.Add(this);
						this._CountryCode = value.CountryCode;
					}
					else
					{
						this._CountryCode = default(string);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[Association(Name="Region_SubRegion", Storage="_Region", ThisKey="RegionCode", OtherKey="RegionCode", IsForeignKey=true)]
		public Region Region
		{
			get
			{
				return this._Region.Entity;
			}
			set
			{
				Region previousValue = this._Region.Entity;
				if (((previousValue != value) 
							|| (this._Region.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Region.Entity = null;
						previousValue.SubRegion.Remove(this);
					}
					this._Region.Entity = value;
					if ((value != null))
					{
						value.SubRegion.Add(this);
						this._RegionCode = value.RegionCode;
					}
					else
					{
						this._RegionCode = default(string);
					}
					this.SendPropertyChanged("Region");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Product(Product entity)
		{
			this.SendPropertyChanging();
			entity.SubRegion = this;
		}
		
		private void detach_Product(Product entity)
		{
			this.SendPropertyChanging();
			entity.SubRegion = null;
		}
	}
	
	[Table(Name="dbo.Supplier")]
	public partial class Supplier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SupplierId;
		
		private string _CompanyName;
		
		private string _ContactName;
		
		private string _ContactTitle;
		
		private string _Address;
		
		private string _Phone;
		
		private string _Fax;
		
		private string _HomePage;
		
		private EntitySet<ProductSupp> _ProductSupp;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSupplierIdChanging(int value);
    partial void OnSupplierIdChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnContactNameChanging(string value);
    partial void OnContactNameChanged();
    partial void OnContactTitleChanging(string value);
    partial void OnContactTitleChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnHomePageChanging(string value);
    partial void OnHomePageChanged();
    #endregion
		
		public Supplier()
		{
			this._ProductSupp = new EntitySet<ProductSupp>(new Action<ProductSupp>(this.attach_ProductSupp), new Action<ProductSupp>(this.detach_ProductSupp));
			OnCreated();
		}
		
		[Column(Storage="_SupplierId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SupplierId
		{
			get
			{
				return this._SupplierId;
			}
			set
			{
				if ((this._SupplierId != value))
				{
					this.OnSupplierIdChanging(value);
					this.SendPropertyChanging();
					this._SupplierId = value;
					this.SendPropertyChanged("SupplierId");
					this.OnSupplierIdChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyName", DbType="NVarChar(30)")]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[Column(Storage="_ContactName", DbType="NVarChar(20)")]
		public string ContactName
		{
			get
			{
				return this._ContactName;
			}
			set
			{
				if ((this._ContactName != value))
				{
					this.OnContactNameChanging(value);
					this.SendPropertyChanging();
					this._ContactName = value;
					this.SendPropertyChanged("ContactName");
					this.OnContactNameChanged();
				}
			}
		}
		
		[Column(Storage="_ContactTitle", DbType="NVarChar(10)")]
		public string ContactTitle
		{
			get
			{
				return this._ContactTitle;
			}
			set
			{
				if ((this._ContactTitle != value))
				{
					this.OnContactTitleChanging(value);
					this.SendPropertyChanging();
					this._ContactTitle = value;
					this.SendPropertyChanged("ContactTitle");
					this.OnContactTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NVarChar(100)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="NVarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Fax", DbType="NVarChar(20)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[Column(Storage="_HomePage", DbType="NVarChar(50)")]
		public string HomePage
		{
			get
			{
				return this._HomePage;
			}
			set
			{
				if ((this._HomePage != value))
				{
					this.OnHomePageChanging(value);
					this.SendPropertyChanging();
					this._HomePage = value;
					this.SendPropertyChanged("HomePage");
					this.OnHomePageChanged();
				}
			}
		}
		
		[Association(Name="Supplier_ProductSupp", Storage="_ProductSupp", ThisKey="SupplierId", OtherKey="SupplierId")]
		public EntitySet<ProductSupp> ProductSupp
		{
			get
			{
				return this._ProductSupp;
			}
			set
			{
				this._ProductSupp.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductSupp(ProductSupp entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = this;
		}
		
		private void detach_ProductSupp(ProductSupp entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = null;
		}
	}
	
	[Table(Name="dbo.Wine")]
	public partial class Wine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WineId;
		
		private string _WineType;
		
		private string _PhotoUrl;
		
		private string _IntroText;
		
		private EntitySet<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWineIdChanging(int value);
    partial void OnWineIdChanged();
    partial void OnWineTypeChanging(string value);
    partial void OnWineTypeChanged();
    partial void OnPhotoUrlChanging(string value);
    partial void OnPhotoUrlChanged();
    partial void OnIntroTextChanging(string value);
    partial void OnIntroTextChanged();
    #endregion
		
		public Wine()
		{
			this._Product = new EntitySet<Product>(new Action<Product>(this.attach_Product), new Action<Product>(this.detach_Product));
			OnCreated();
		}
		
		[Column(Storage="_WineId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int WineId
		{
			get
			{
				return this._WineId;
			}
			set
			{
				if ((this._WineId != value))
				{
					this.OnWineIdChanging(value);
					this.SendPropertyChanging();
					this._WineId = value;
					this.SendPropertyChanged("WineId");
					this.OnWineIdChanged();
				}
			}
		}
		
		[Column(Storage="_WineType", DbType="NVarChar(20)")]
		public string WineType
		{
			get
			{
				return this._WineType;
			}
			set
			{
				if ((this._WineType != value))
				{
					this.OnWineTypeChanging(value);
					this.SendPropertyChanging();
					this._WineType = value;
					this.SendPropertyChanged("WineType");
					this.OnWineTypeChanged();
				}
			}
		}
		
		[Column(Storage="_PhotoUrl", DbType="NVarChar(50)")]
		public string PhotoUrl
		{
			get
			{
				return this._PhotoUrl;
			}
			set
			{
				if ((this._PhotoUrl != value))
				{
					this.OnPhotoUrlChanging(value);
					this.SendPropertyChanging();
					this._PhotoUrl = value;
					this.SendPropertyChanged("PhotoUrl");
					this.OnPhotoUrlChanged();
				}
			}
		}
		
		[Column(Storage="_IntroText", DbType="NVarChar(MAX)")]
		public string IntroText
		{
			get
			{
				return this._IntroText;
			}
			set
			{
				if ((this._IntroText != value))
				{
					this.OnIntroTextChanging(value);
					this.SendPropertyChanging();
					this._IntroText = value;
					this.SendPropertyChanged("IntroText");
					this.OnIntroTextChanged();
				}
			}
		}
		
		[Association(Name="Wine_Product", Storage="_Product", ThisKey="WineId", OtherKey="WineId")]
		public EntitySet<Product> Product
		{
			get
			{
				return this._Product;
			}
			set
			{
				this._Product.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Product(Product entity)
		{
			this.SendPropertyChanging();
			entity.Wine = this;
		}
		
		private void detach_Product(Product entity)
		{
			this.SendPropertyChanging();
			entity.Wine = null;
		}
	}
	
	[Table(Name="dbo.Promote")]
	public partial class Promote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PromoteType;
		
		private string _Description;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private EntitySet<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPromoteTypeChanging(string value);
    partial void OnPromoteTypeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    #endregion
		
		public Promote()
		{
			this._Product = new EntitySet<Product>(new Action<Product>(this.attach_Product), new Action<Product>(this.detach_Product));
			OnCreated();
		}
		
		[Column(Storage="_PromoteType", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PromoteType
		{
			get
			{
				return this._PromoteType;
			}
			set
			{
				if ((this._PromoteType != value))
				{
					this.OnPromoteTypeChanging(value);
					this.SendPropertyChanging();
					this._PromoteType = value;
					this.SendPropertyChanged("PromoteType");
					this.OnPromoteTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Association(Name="Promote_Product", Storage="_Product", ThisKey="PromoteType", OtherKey="PromoteType")]
		public EntitySet<Product> Product
		{
			get
			{
				return this._Product;
			}
			set
			{
				this._Product.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Product(Product entity)
		{
			this.SendPropertyChanging();
			entity.Promote = this;
		}
		
		private void detach_Product(Product entity)
		{
			this.SendPropertyChanging();
			entity.Promote = null;
		}
	}
	
	[Table(Name="dbo.Taste")]
	public partial class Taste : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TasteType;
		
		private string _TasteDesc;
		
		private EntitySet<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTasteTypeChanging(string value);
    partial void OnTasteTypeChanged();
    partial void OnTasteDescChanging(string value);
    partial void OnTasteDescChanged();
    #endregion
		
		public Taste()
		{
			this._Product = new EntitySet<Product>(new Action<Product>(this.attach_Product), new Action<Product>(this.detach_Product));
			OnCreated();
		}
		
		[Column(Storage="_TasteType", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TasteType
		{
			get
			{
				return this._TasteType;
			}
			set
			{
				if ((this._TasteType != value))
				{
					this.OnTasteTypeChanging(value);
					this.SendPropertyChanging();
					this._TasteType = value;
					this.SendPropertyChanged("TasteType");
					this.OnTasteTypeChanged();
				}
			}
		}
		
		[Column(Storage="_TasteDesc", DbType="NVarChar(50)")]
		public string TasteDesc
		{
			get
			{
				return this._TasteDesc;
			}
			set
			{
				if ((this._TasteDesc != value))
				{
					this.OnTasteDescChanging(value);
					this.SendPropertyChanging();
					this._TasteDesc = value;
					this.SendPropertyChanged("TasteDesc");
					this.OnTasteDescChanged();
				}
			}
		}
		
		[Association(Name="Taste_Product", Storage="_Product", ThisKey="TasteType", OtherKey="TasteType")]
		public EntitySet<Product> Product
		{
			get
			{
				return this._Product;
			}
			set
			{
				this._Product.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Product(Product entity)
		{
			this.SendPropertyChanging();
			entity.Taste = this;
		}
		
		private void detach_Product(Product entity)
		{
			this.SendPropertyChanging();
			entity.Taste = null;
		}
	}
	
	[Table(Name="dbo.ProductSupp")]
	public partial class ProductSupp : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SupplierId;
		
		private int _ProductId;
		
		private EntityRef<Supplier> _Supplier;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSupplierIdChanging(int value);
    partial void OnSupplierIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    #endregion
		
		public ProductSupp()
		{
			this._Supplier = default(EntityRef<Supplier>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[Column(Storage="_SupplierId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SupplierId
		{
			get
			{
				return this._SupplierId;
			}
			set
			{
				if ((this._SupplierId != value))
				{
					if (this._Supplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplierIdChanging(value);
					this.SendPropertyChanging();
					this._SupplierId = value;
					this.SendPropertyChanged("SupplierId");
					this.OnSupplierIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Association(Name="Supplier_ProductSupp", Storage="_Supplier", ThisKey="SupplierId", OtherKey="SupplierId", IsForeignKey=true)]
		public Supplier Supplier
		{
			get
			{
				return this._Supplier.Entity;
			}
			set
			{
				Supplier previousValue = this._Supplier.Entity;
				if (((previousValue != value) 
							|| (this._Supplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supplier.Entity = null;
						previousValue.ProductSupp.Remove(this);
					}
					this._Supplier.Entity = value;
					if ((value != null))
					{
						value.ProductSupp.Add(this);
						this._SupplierId = value.SupplierId;
					}
					else
					{
						this._SupplierId = default(int);
					}
					this.SendPropertyChanged("Supplier");
				}
			}
		}
		
		[Association(Name="Product_ProductSupp", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductSupp.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductSupp.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductId;
		
		private string _PName;
		
		private string _CountryCode;
		
		private string _RegionCode;
		
		private string _SubRegionCode;
		
		private System.Nullable<int> _GrapeId;
		
		private System.Nullable<int> _WineId;
		
		private System.Nullable<int> _ProducerId;
		
		private System.Nullable<decimal> _UnitPrice;
		
		private string _PromoteType;
		
		private System.Nullable<int> _DrinkStart;
		
		private System.Nullable<int> _DrinkEnd;
		
		private string _Comment;
		
		private string _TasteType;
		
		private System.Nullable<int> _VOL;
		
		private string _CapTypeId;
		
		private System.Nullable<int> _Vintage;
		
		private string _Package;
		
		private bool _InStock;
		
		private string _PhotoUrl;
		
		private bool _Valid;
		
		private string _IntroText;
		
		private EntitySet<Cart> _Cart;
		
		private EntitySet<ProductSupp> _ProductSupp;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<Grape> _Grape;
		
		private EntityRef<Producer> _Producer;
		
		private EntityRef<Promote> _Promote;
		
		private EntityRef<Region> _Region;
		
		private EntityRef<SubRegion> _SubRegion;
		
		private EntityRef<Taste> _Taste;
		
		private EntityRef<Wine> _Wine;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnPNameChanging(string value);
    partial void OnPNameChanged();
    partial void OnCountryCodeChanging(string value);
    partial void OnCountryCodeChanged();
    partial void OnRegionCodeChanging(string value);
    partial void OnRegionCodeChanged();
    partial void OnSubRegionCodeChanging(string value);
    partial void OnSubRegionCodeChanged();
    partial void OnGrapeIdChanging(System.Nullable<int> value);
    partial void OnGrapeIdChanged();
    partial void OnWineIdChanging(System.Nullable<int> value);
    partial void OnWineIdChanged();
    partial void OnProducerIdChanging(System.Nullable<int> value);
    partial void OnProducerIdChanged();
    partial void OnUnitPriceChanging(System.Nullable<decimal> value);
    partial void OnUnitPriceChanged();
    partial void OnPromoteTypeChanging(string value);
    partial void OnPromoteTypeChanged();
    partial void OnDrinkStartChanging(System.Nullable<int> value);
    partial void OnDrinkStartChanged();
    partial void OnDrinkEndChanging(System.Nullable<int> value);
    partial void OnDrinkEndChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnTasteTypeChanging(string value);
    partial void OnTasteTypeChanged();
    partial void OnVOLChanging(System.Nullable<int> value);
    partial void OnVOLChanged();
    partial void OnCapTypeIdChanging(string value);
    partial void OnCapTypeIdChanged();
    partial void OnVintageChanging(System.Nullable<int> value);
    partial void OnVintageChanged();
    partial void OnPackageChanging(string value);
    partial void OnPackageChanged();
    partial void OnInStockChanging(bool value);
    partial void OnInStockChanged();
    partial void OnPhotoUrlChanging(string value);
    partial void OnPhotoUrlChanged();
    partial void OnValidChanging(bool value);
    partial void OnValidChanged();
    partial void OnIntroTextChanging(string value);
    partial void OnIntroTextChanged();
    #endregion
		
		public Product()
		{
			this._Cart = new EntitySet<Cart>(new Action<Cart>(this.attach_Cart), new Action<Cart>(this.detach_Cart));
			this._ProductSupp = new EntitySet<ProductSupp>(new Action<ProductSupp>(this.attach_ProductSupp), new Action<ProductSupp>(this.detach_ProductSupp));
			this._Country = default(EntityRef<Country>);
			this._Grape = default(EntityRef<Grape>);
			this._Producer = default(EntityRef<Producer>);
			this._Promote = default(EntityRef<Promote>);
			this._Region = default(EntityRef<Region>);
			this._SubRegion = default(EntityRef<SubRegion>);
			this._Taste = default(EntityRef<Taste>);
			this._Wine = default(EntityRef<Wine>);
			OnCreated();
		}
		
		[Column(Storage="_ProductId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_PName", DbType="NVarChar(50)")]
		public string PName
		{
			get
			{
				return this._PName;
			}
			set
			{
				if ((this._PName != value))
				{
					this.OnPNameChanging(value);
					this.SendPropertyChanging();
					this._PName = value;
					this.SendPropertyChanged("PName");
					this.OnPNameChanged();
				}
			}
		}
		
		[Column(Storage="_CountryCode", DbType="NChar(10)")]
		public string CountryCode
		{
			get
			{
				return this._CountryCode;
			}
			set
			{
				if ((this._CountryCode != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryCodeChanging(value);
					this.SendPropertyChanging();
					this._CountryCode = value;
					this.SendPropertyChanged("CountryCode");
					this.OnCountryCodeChanged();
				}
			}
		}
		
		[Column(Storage="_RegionCode", DbType="NChar(10)")]
		public string RegionCode
		{
			get
			{
				return this._RegionCode;
			}
			set
			{
				if ((this._RegionCode != value))
				{
					if (this._Region.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegionCodeChanging(value);
					this.SendPropertyChanging();
					this._RegionCode = value;
					this.SendPropertyChanged("RegionCode");
					this.OnRegionCodeChanged();
				}
			}
		}
		
		[Column(Storage="_SubRegionCode", DbType="NChar(10)")]
		public string SubRegionCode
		{
			get
			{
				return this._SubRegionCode;
			}
			set
			{
				if ((this._SubRegionCode != value))
				{
					if (this._SubRegion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubRegionCodeChanging(value);
					this.SendPropertyChanging();
					this._SubRegionCode = value;
					this.SendPropertyChanged("SubRegionCode");
					this.OnSubRegionCodeChanged();
				}
			}
		}
		
		[Column(Storage="_GrapeId", DbType="Int")]
		public System.Nullable<int> GrapeId
		{
			get
			{
				return this._GrapeId;
			}
			set
			{
				if ((this._GrapeId != value))
				{
					if (this._Grape.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGrapeIdChanging(value);
					this.SendPropertyChanging();
					this._GrapeId = value;
					this.SendPropertyChanged("GrapeId");
					this.OnGrapeIdChanged();
				}
			}
		}
		
		[Column(Storage="_WineId", DbType="Int")]
		public System.Nullable<int> WineId
		{
			get
			{
				return this._WineId;
			}
			set
			{
				if ((this._WineId != value))
				{
					if (this._Wine.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWineIdChanging(value);
					this.SendPropertyChanging();
					this._WineId = value;
					this.SendPropertyChanged("WineId");
					this.OnWineIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProducerId", DbType="Int")]
		public System.Nullable<int> ProducerId
		{
			get
			{
				return this._ProducerId;
			}
			set
			{
				if ((this._ProducerId != value))
				{
					if (this._Producer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProducerIdChanging(value);
					this.SendPropertyChanging();
					this._ProducerId = value;
					this.SendPropertyChanged("ProducerId");
					this.OnProducerIdChanged();
				}
			}
		}
		
		[Column(Storage="_UnitPrice", DbType="Money")]
		public System.Nullable<decimal> UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[Column(Storage="_PromoteType", DbType="NChar(10)")]
		public string PromoteType
		{
			get
			{
				return this._PromoteType;
			}
			set
			{
				if ((this._PromoteType != value))
				{
					if (this._Promote.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPromoteTypeChanging(value);
					this.SendPropertyChanging();
					this._PromoteType = value;
					this.SendPropertyChanged("PromoteType");
					this.OnPromoteTypeChanged();
				}
			}
		}
		
		[Column(Storage="_DrinkStart", DbType="Int")]
		public System.Nullable<int> DrinkStart
		{
			get
			{
				return this._DrinkStart;
			}
			set
			{
				if ((this._DrinkStart != value))
				{
					this.OnDrinkStartChanging(value);
					this.SendPropertyChanging();
					this._DrinkStart = value;
					this.SendPropertyChanged("DrinkStart");
					this.OnDrinkStartChanged();
				}
			}
		}
		
		[Column(Storage="_DrinkEnd", DbType="Int")]
		public System.Nullable<int> DrinkEnd
		{
			get
			{
				return this._DrinkEnd;
			}
			set
			{
				if ((this._DrinkEnd != value))
				{
					this.OnDrinkEndChanging(value);
					this.SendPropertyChanging();
					this._DrinkEnd = value;
					this.SendPropertyChanged("DrinkEnd");
					this.OnDrinkEndChanged();
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="NVarChar(1000)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[Column(Storage="_TasteType", DbType="NChar(10)")]
		public string TasteType
		{
			get
			{
				return this._TasteType;
			}
			set
			{
				if ((this._TasteType != value))
				{
					if (this._Taste.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTasteTypeChanging(value);
					this.SendPropertyChanging();
					this._TasteType = value;
					this.SendPropertyChanged("TasteType");
					this.OnTasteTypeChanged();
				}
			}
		}
		
		[Column(Storage="_VOL", DbType="Int")]
		public System.Nullable<int> VOL
		{
			get
			{
				return this._VOL;
			}
			set
			{
				if ((this._VOL != value))
				{
					this.OnVOLChanging(value);
					this.SendPropertyChanging();
					this._VOL = value;
					this.SendPropertyChanged("VOL");
					this.OnVOLChanged();
				}
			}
		}
		
		[Column(Storage="_CapTypeId", DbType="Char(2)")]
		public string CapTypeId
		{
			get
			{
				return this._CapTypeId;
			}
			set
			{
				if ((this._CapTypeId != value))
				{
					this.OnCapTypeIdChanging(value);
					this.SendPropertyChanging();
					this._CapTypeId = value;
					this.SendPropertyChanged("CapTypeId");
					this.OnCapTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_Vintage", DbType="Int")]
		public System.Nullable<int> Vintage
		{
			get
			{
				return this._Vintage;
			}
			set
			{
				if ((this._Vintage != value))
				{
					this.OnVintageChanging(value);
					this.SendPropertyChanging();
					this._Vintage = value;
					this.SendPropertyChanged("Vintage");
					this.OnVintageChanged();
				}
			}
		}
		
		[Column(Storage="_Package", DbType="NVarChar(50)")]
		public string Package
		{
			get
			{
				return this._Package;
			}
			set
			{
				if ((this._Package != value))
				{
					this.OnPackageChanging(value);
					this.SendPropertyChanging();
					this._Package = value;
					this.SendPropertyChanged("Package");
					this.OnPackageChanged();
				}
			}
		}
		
		[Column(Storage="_InStock", DbType="Bit NOT NULL")]
		public bool InStock
		{
			get
			{
				return this._InStock;
			}
			set
			{
				if ((this._InStock != value))
				{
					this.OnInStockChanging(value);
					this.SendPropertyChanging();
					this._InStock = value;
					this.SendPropertyChanged("InStock");
					this.OnInStockChanged();
				}
			}
		}
		
		[Column(Storage="_PhotoUrl", DbType="NVarChar(100)")]
		public string PhotoUrl
		{
			get
			{
				return this._PhotoUrl;
			}
			set
			{
				if ((this._PhotoUrl != value))
				{
					this.OnPhotoUrlChanging(value);
					this.SendPropertyChanging();
					this._PhotoUrl = value;
					this.SendPropertyChanged("PhotoUrl");
					this.OnPhotoUrlChanged();
				}
			}
		}
		
		[Column(Storage="_Valid", DbType="Bit NOT NULL")]
		public bool Valid
		{
			get
			{
				return this._Valid;
			}
			set
			{
				if ((this._Valid != value))
				{
					this.OnValidChanging(value);
					this.SendPropertyChanging();
					this._Valid = value;
					this.SendPropertyChanged("Valid");
					this.OnValidChanged();
				}
			}
		}
		
		[Column(Storage="_IntroText", DbType="NVarChar(MAX)")]
		public string IntroText
		{
			get
			{
				return this._IntroText;
			}
			set
			{
				if ((this._IntroText != value))
				{
					this.OnIntroTextChanging(value);
					this.SendPropertyChanging();
					this._IntroText = value;
					this.SendPropertyChanged("IntroText");
					this.OnIntroTextChanged();
				}
			}
		}
		
		[Association(Name="Product_Cart", Storage="_Cart", ThisKey="ProductId", OtherKey="ProductId")]
		public EntitySet<Cart> Cart
		{
			get
			{
				return this._Cart;
			}
			set
			{
				this._Cart.Assign(value);
			}
		}
		
		[Association(Name="Product_ProductSupp", Storage="_ProductSupp", ThisKey="ProductId", OtherKey="ProductId")]
		public EntitySet<ProductSupp> ProductSupp
		{
			get
			{
				return this._ProductSupp;
			}
			set
			{
				this._ProductSupp.Assign(value);
			}
		}
		
		[Association(Name="Country_Product", Storage="_Country", ThisKey="CountryCode", OtherKey="CountryCode", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Product.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Product.Add(this);
						this._CountryCode = value.CountryCode;
					}
					else
					{
						this._CountryCode = default(string);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[Association(Name="Grape_Product", Storage="_Grape", ThisKey="GrapeId", OtherKey="GrapeId", IsForeignKey=true)]
		public Grape Grape
		{
			get
			{
				return this._Grape.Entity;
			}
			set
			{
				Grape previousValue = this._Grape.Entity;
				if (((previousValue != value) 
							|| (this._Grape.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Grape.Entity = null;
						previousValue.Product.Remove(this);
					}
					this._Grape.Entity = value;
					if ((value != null))
					{
						value.Product.Add(this);
						this._GrapeId = value.GrapeId;
					}
					else
					{
						this._GrapeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Grape");
				}
			}
		}
		
		[Association(Name="Producer_Product", Storage="_Producer", ThisKey="ProducerId", OtherKey="ProducerId", IsForeignKey=true)]
		public Producer Producer
		{
			get
			{
				return this._Producer.Entity;
			}
			set
			{
				Producer previousValue = this._Producer.Entity;
				if (((previousValue != value) 
							|| (this._Producer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Producer.Entity = null;
						previousValue.Product.Remove(this);
					}
					this._Producer.Entity = value;
					if ((value != null))
					{
						value.Product.Add(this);
						this._ProducerId = value.ProducerId;
					}
					else
					{
						this._ProducerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Producer");
				}
			}
		}
		
		[Association(Name="Promote_Product", Storage="_Promote", ThisKey="PromoteType", OtherKey="PromoteType", IsForeignKey=true)]
		public Promote Promote
		{
			get
			{
				return this._Promote.Entity;
			}
			set
			{
				Promote previousValue = this._Promote.Entity;
				if (((previousValue != value) 
							|| (this._Promote.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Promote.Entity = null;
						previousValue.Product.Remove(this);
					}
					this._Promote.Entity = value;
					if ((value != null))
					{
						value.Product.Add(this);
						this._PromoteType = value.PromoteType;
					}
					else
					{
						this._PromoteType = default(string);
					}
					this.SendPropertyChanged("Promote");
				}
			}
		}
		
		[Association(Name="Region_Product", Storage="_Region", ThisKey="RegionCode", OtherKey="RegionCode", IsForeignKey=true)]
		public Region Region
		{
			get
			{
				return this._Region.Entity;
			}
			set
			{
				Region previousValue = this._Region.Entity;
				if (((previousValue != value) 
							|| (this._Region.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Region.Entity = null;
						previousValue.Product.Remove(this);
					}
					this._Region.Entity = value;
					if ((value != null))
					{
						value.Product.Add(this);
						this._RegionCode = value.RegionCode;
					}
					else
					{
						this._RegionCode = default(string);
					}
					this.SendPropertyChanged("Region");
				}
			}
		}
		
		[Association(Name="SubRegion_Product", Storage="_SubRegion", ThisKey="SubRegionCode", OtherKey="SubRegionCode", IsForeignKey=true)]
		public SubRegion SubRegion
		{
			get
			{
				return this._SubRegion.Entity;
			}
			set
			{
				SubRegion previousValue = this._SubRegion.Entity;
				if (((previousValue != value) 
							|| (this._SubRegion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubRegion.Entity = null;
						previousValue.Product.Remove(this);
					}
					this._SubRegion.Entity = value;
					if ((value != null))
					{
						value.Product.Add(this);
						this._SubRegionCode = value.SubRegionCode;
					}
					else
					{
						this._SubRegionCode = default(string);
					}
					this.SendPropertyChanged("SubRegion");
				}
			}
		}
		
		[Association(Name="Taste_Product", Storage="_Taste", ThisKey="TasteType", OtherKey="TasteType", IsForeignKey=true)]
		public Taste Taste
		{
			get
			{
				return this._Taste.Entity;
			}
			set
			{
				Taste previousValue = this._Taste.Entity;
				if (((previousValue != value) 
							|| (this._Taste.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Taste.Entity = null;
						previousValue.Product.Remove(this);
					}
					this._Taste.Entity = value;
					if ((value != null))
					{
						value.Product.Add(this);
						this._TasteType = value.TasteType;
					}
					else
					{
						this._TasteType = default(string);
					}
					this.SendPropertyChanged("Taste");
				}
			}
		}
		
		[Association(Name="Wine_Product", Storage="_Wine", ThisKey="WineId", OtherKey="WineId", IsForeignKey=true)]
		public Wine Wine
		{
			get
			{
				return this._Wine.Entity;
			}
			set
			{
				Wine previousValue = this._Wine.Entity;
				if (((previousValue != value) 
							|| (this._Wine.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Wine.Entity = null;
						previousValue.Product.Remove(this);
					}
					this._Wine.Entity = value;
					if ((value != null))
					{
						value.Product.Add(this);
						this._WineId = value.WineId;
					}
					else
					{
						this._WineId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Wine");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cart(Cart entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Cart(Cart entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductSupp(ProductSupp entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductSupp(ProductSupp entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
}
#pragma warning restore 1591
